{"version":3,"sources":["redux/rootReducer.js","redux/notes/noteReducers.js","redux/notes/noteTypes.js","redux/store.js","components/OutsideAlerter.js","redux/notes/noteActions.js","components/NotesContainer.js","App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","noteReducers","state","action","type","id","text","date","filter","map","x","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","OutsideAlerter","props","wrapperRef","useRef","useState","passText","edit","setEdit","ref","handleClickOutside","event","current","contains","target","document","getElementById","passId","style","display","sendData","useEffect","addEventListener","removeEventListener","useOutsideAlerter","className","defaultValue","onChange","e","value","addId","connect","noteText","dispatch","addNote","deleteNote","editNote","setText","setId","dateFormat","dated","tempDate","Date","getHours","getMinutes","slice","getSeconds","getDate","getMonth","getFullYear","textClick","parseInt","handleEdit","dataText","dataId","autoFocus","placeholder","onClick","key","color","icon","faTrashAlt","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8bc17926.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { noteReducers } from './notes/noteReducers';\r\n\r\nconst rootReducer = combineReducers({\r\n\tnoteReducers: noteReducers\r\n});\r\n\r\nexport default rootReducer;\r\n","import { ADD_NOTE, DELETE_NOTE, EDIT_NOTE } from './noteTypes';\r\n\r\nexport const noteReducers = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ADD_NOTE:\r\n\t\t\treturn [\r\n\t\t\t\t...state,\r\n\t\t\t\t{\r\n\t\t\t\t\tid: action.id,\r\n\t\t\t\t\ttext: action.text,\r\n\t\t\t\t\tdate: action.date\r\n\t\t\t\t}\r\n\t\t\t];\r\n\r\n\t\tcase DELETE_NOTE:\r\n\t\t\treturn state.filter(({ id }) => id !== action.id);\r\n\r\n\t\tcase EDIT_NOTE:\r\n\t\t\treturn state.map((x) => {\r\n\t\t\t\tif (x.id === action.id) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: action.id,\r\n\t\t\t\t\t\ttext: action.text,\r\n\t\t\t\t\t\tdate: action.date\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\treturn x;\r\n\t\t\t});\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","export const ADD_NOTE = 'ADD_NOTE';\r\nexport const DELETE_NOTE = 'DELETE_NOTE';\r\nexport const EDIT_NOTE = 'EDIT_NOTE';\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\n\r\nfunction useOutsideAlerter(ref, props, edit) {\r\n\tfunction handleClickOutside(event) {\r\n\t\tif (ref.current && !ref.current.contains(event.target)) {\r\n\t\t\tdocument.getElementById(`textArea${props.passId}`).style.display = 'none';\r\n\t\t\tdocument.getElementById(`${props.passId}beforeArea`).style.display = 'block';\r\n\t\t\tprops.sendData(edit, props.passId);\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tdocument.addEventListener('mousedown', handleClickOutside);\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener('mousedown', handleClickOutside);\r\n\t\t};\r\n\t});\r\n}\r\n\r\nfunction OutsideAlerter(props) {\r\n\tconst wrapperRef = useRef(null);\r\n\tconst [ edit, setEdit ] = useState(props.passText);\r\n\tuseOutsideAlerter(wrapperRef, props, edit);\r\n\r\n\treturn (\r\n\t\t<textarea\r\n\t\t\tid={`textArea${props.passId}`}\r\n\t\t\tclassName=\"noteTextArea\"\r\n\t\t\tdefaultValue={props.passText}\r\n\t\t\tref={wrapperRef}\r\n\t\t\tonChange={(e) => setEdit(e.target.value)}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default OutsideAlerter;\r\n","import { ADD_NOTE, DELETE_NOTE, EDIT_NOTE } from './noteTypes';\r\n\r\nlet addId = 0;\r\n\r\nexport const addNote = (text, date) => ({\r\n\ttype: ADD_NOTE,\r\n\tid: addId++,\r\n\tdate: date,\r\n\ttext\r\n});\r\n\r\nexport const deleteNote = (id) => {\r\n\treturn {\r\n\t\ttype: DELETE_NOTE,\r\n\t\tid: id\r\n\t};\r\n};\r\n\r\nexport const editNote = (text, id, date) => {\r\n\treturn {\r\n\t\ttype: EDIT_NOTE,\r\n\t\tid: id,\r\n\t\tdate: date,\r\n\t\ttext\r\n\t};\r\n};\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport OutsideAlerter from './OutsideAlerter';\r\nimport { addNote, deleteNote, editNote } from '../redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport '../App.scss';\r\n\r\nfunction NotesContainer(props) {\r\n\tconst [ text, setText ] = useState('');\r\n\tconst [ id, setId ] = useState('');\r\n\r\n\tconst dateFormat = (dated) => {\r\n\t\tlet tempDate = new Date();\r\n\t\tlet date =\r\n\t\t\tdated +\r\n\t\t\t' ' +\r\n\t\t\ttempDate.getHours() +\r\n\t\t\t':' +\r\n\t\t\t('0' + tempDate.getMinutes()).slice(-2) +\r\n\t\t\t':' +\r\n\t\t\t('0' + tempDate.getSeconds()).slice(-2) +\r\n\t\t\t' ' +\r\n\t\t\t('0' + tempDate.getDate()).slice(-2) +\r\n\t\t\t'-' +\r\n\t\t\t('0' + (tempDate.getMonth() + 1)).slice(-2) +\r\n\t\t\t'-' +\r\n\t\t\ttempDate.getFullYear();\r\n\t\treturn date;\r\n\t};\r\n\r\n\tconst handleAdd = () => {\r\n\t\tif (text !== '') {\r\n\t\t\tprops.addNote(text, dateFormat('ADDED:'));\r\n\t\t\tsetText('');\r\n\t\t}\r\n\t};\r\n\r\n\tconst textClick = (e) => {\r\n\t\te.target.style.display = 'none';\r\n\t\tsetId(parseInt(e.target.id));\r\n\t};\r\n\r\n\tconst handleEdit = (dataText, dataId) => {\r\n\t\tif (dataText === '') {\r\n\t\t\tprops.deleteNote(dataId);\r\n\t\t} else {\r\n\t\t\tprops.editNote(dataText, dataId, dateFormat('EDITED:'));\r\n\t\t}\r\n\t\tsetId('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div id=\"bigNotesContainer\">\r\n\t\t\t<form>\r\n\t\t\t\t<header>\r\n\t\t\t\t\t<p id=\"react-color\">react</p>\r\n\t\t\t\t\t<p id=\"dash\"> - </p>\r\n\t\t\t\t\t<p id=\"redux-color\">redux</p>\r\n\t\t\t\t\t<p id=\"mark-header\">markdown notes</p>\r\n\t\t\t\t</header>\r\n\t\t\t\t<p>click on text to edit</p>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t\tplaceholder=\"start typing...\"\r\n\t\t\t\t\tonChange={(e) => setText(e.target.value)}\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"reset\" onClick={handleAdd}>\r\n\t\t\t\t\tadd note\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t\t<div id=\"notesContainer\">\r\n\t\t\t\t{props.noteText.map((x) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"todoItem\" key={x.id}>\r\n\t\t\t\t\t\t\t<div className=\"noteTextCont\">\r\n\t\t\t\t\t\t\t\t<div className=\"data\">\r\n\t\t\t\t\t\t\t\t\t{x.date}\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"#fce77d\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"trash\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => props.deleteNote(x.id)}\r\n\t\t\t\t\t\t\t\t\t\ticon={faTrashAlt}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<pre id={`${x.id}beforeArea`} className=\"noteBefore\" onClick={textClick}>\r\n\t\t\t\t\t\t\t\t\t{x.text}\r\n\t\t\t\t\t\t\t\t</pre>\r\n\t\t\t\t\t\t\t\t{x.id === id ? (\r\n\t\t\t\t\t\t\t\t\t<OutsideAlerter passId={x.id} passText={x.text} sendData={handleEdit} />\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tnoteText: state.noteReducers\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddNote: (text, date) => dispatch(addNote(text, date)),\r\n\t\tdeleteNote: (id) => dispatch(deleteNote(id)),\r\n\t\teditNote: (text, id, date) => dispatch(editNote(text, id, date))\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NotesContainer);\r\n","import React from 'react';\nimport './App.scss';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport NotesContainer from './components/NotesContainer';\n\nfunction App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<NotesContainer />\n\t\t\t</div>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}